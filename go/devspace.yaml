version: v1beta11

# https://github.com/loft-sh/devspace/tree/master/examples

# `vars` specifies variables which may be used as ${VAR_NAME} in devspace.yaml
vars:
- name: IMAGE
  value: httpd:2.4.53-alpine
- name: IMAGE_DEBUG
  value: koolay/devspace-go:0.1.0
- name: NAMESPACE
  value: quickstart

# `deployments` tells DevSpace how to deploy this project
deployments:
- name: nats-server
  namespace: ${NAMESPACE}
  # This deployment uses `kubectl` but you can also define `helm` deployments
  helm:
    chart:
      name: nats
      repo: https://charts.bitnami.com/bitnami
    values:
      cluster:
        enabled: false
      auth:
        enabled: false
      jetstream:
        enabled: false

- name: app01
  # This deployment uses `kubectl` but you can also define `helm` deployments
  kubectl:
    manifests:
    - ./manifests/*

# `dev` only applies when you run `devspace dev`
dev:
  logs:
    sync: false
    selectors:
    - imageSelector: ${IMAGE}
  autoReload:
    paths:
    - devspace.yaml
    - devspace_start.sh
    deployments:
      - app01

  open:
  - url: http://localhost:9080 # DevSpace UI
  - url: http://localhost:3000 # app01 UI
  ports:
    # dlv
    - labelSelector:
        ## follow from deployments
        app: app01
      forward:
        - port: 3000
          remotePort: 8080
        - port: 2346
          remotePort: 2345

  # `dev.sync` configures a file sync between our Pods in k8s and your local project files
  sync:
  - name: app01
    localSubPath: ./
    containerPath: /app
    imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
    # `excludePaths` option expects an array of strings with paths that should not be synchronized between the
    # local filesystem and the remote container filesystem. It uses the same syntax as `.gitignore`.
    excludePaths:
    - .git/
    - tmp/

  # `dev.terminal` tells DevSpace to open a terminal as a last step during `devspace dev`
  terminal:
    imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
    # With this optional `command` we can tell DevSpace to run a script when opening the terminal
    # This is often useful to display help info for new users or perform initial tasks (e.g. installing dependencies)
    # DevSpace has generated an example ./devspace_start.sh file in your local project - Feel free to customize it!
    command:
    - ./devspace_start.sh

  # Since our Helm charts and manifests deployments are often optimized for production,
  # DevSpace let's you swap out Pods dynamically to get a better dev environment
  replacePods:
  - name: app01
    imageSelector: ${IMAGE}
    replaceImage: ${IMAGE_DEBUG}
    patches:
    - op: replace
      path: spec.containers[0].env[0].value
      value: nats-server.${NAMESPACE}.svc.cluster.local:4222
    - op: replace
      path: spec.containers[0].command
      value:
      - sleep
    - op: replace
      path: spec.containers[0].args
      value:
      - "9999999"
    - op: remove
      path: spec.containers[0].securityContext

commands:
  # devspace run app01
  - name: app01
    command: "devspace dev --debug -n ${NAMESPACE} --profile=app01 $@"


# `profiles` lets you modify the config above for different environments (e.g. dev vs production)
profiles:
  # This profile is called `production` and you can use it for example using: devspace deploy -p production
  # We generally recommend using the base config without any profiles as optimized for development (e.g. image build+push is disabled)
- name: app01
  # patches:
  # - op: replace
  #   path: dev.replacePods.name=app01
